;; TRG MONEY ICO CODE


int limit_init() asm "50000000000000000 PUSHINT";

int op::transfer() asm "0xf8a7ea5 PUSHINT";
int op::transfer_notification() asm "0x7362d09c PUSHINT";
int op::internal_transfer() asm "0x178d4519 PUSHINT";
int op::excesses() asm "0xd53276db PUSHINT";
int op::burn() asm "0x595f07bc PUSHINT";
int op::burn_notification() asm "0x7bdd97de PUSHINT";

int workchain() asm "0 PUSHINT";

() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}
;; Minter
int op::mint() asm "21 PUSHINT";

cell pack_jetton_wallet_data(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
   return  begin_cell()
            .store_coins(balance)
            .store_slice(owner_address)
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
           .end_cell();
}

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
  return begin_cell()
          .store_uint(0, 2)
          .store_dict(jetton_wallet_code)
          .store_dict(pack_jetton_wallet_data(0, owner_address, jetton_master_address, jetton_wallet_code))
          .store_uint(0, 1)
         .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
  return begin_cell().store_uint(4, 3)
                     .store_int(workchain(), 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
  return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}


slice msg_witraw() asm "<b 124 word Witraw ton ot prodazhi trg coins| $, b> <s PUSHSLICE";



(int, slice, cell, cell, int, int, int) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
      ds~load_coins(), 
      ds~load_msg_addr(),
      ds~load_ref(), 
      ds~load_ref(), 
      ds~load_coins(),
      ds~load_coins(),
      ds~load_uint(32)
  );
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int price, int limit, int end) impure inline {
  set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
            .store_coins(price)
            .store_coins(limit)
            .store_uint(end, 32)
           .end_cell()
          );
}

() mint_trg(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
  cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
  slice to_wallet_address = calculate_jetton_wallet_address(state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);
  send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { 
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int price, int limit, int end) = load_data();

    if (in_msg_body.slice_empty?()) { ;; buy trg for Toncoin
      if(total_supply >= limit) {
          throw(4122);
      }
      int amount = 50000000; ;; 0.05 TON for mint message
      int buy_amount = msg_value - amount;
      throw_unless(76, buy_amount > 0);

      int jetton_amount = buy_amount * 1000000000 / price;

      throw_unless(79, jetton_amount > 0);

      var master_msg = begin_cell()
            .store_uint(op::internal_transfer(), 32)
            .store_uint(0, 64) 
            .store_coins(jetton_amount)
            .store_slice(my_address()) 
            .store_slice(sender_address) 
            .store_coins(0) 
            .store_uint(0, 1) 
            .end_cell();

      mint_trg(sender_address, jetton_wallet_code, amount, master_msg);
      save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code, price, limit, end);
      return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::mint()) {
        throw_if(4218, total_supply >= limit_init());
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id
        int jetton_amount = master_msg_cs~load_coins();
        mint_trg(to_address, jetton_wallet_code, amount, master_msg);
        save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code, price, limit, end);
        return ();
    }

    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(74,
            equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );
        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code, price, limit, end);
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
          var msg = begin_cell()
            .store_uint(0x10, 6) 
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
          send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();  
    }

    if (op == 123) { ;; witraw toncoins
        throw_unless(75, equal_slices(sender_address, admin_address));
        int amount = in_msg_body~load_coins();
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(admin_address)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0, 32)
            .store_slice(msg_witraw());
        send_raw_message(msg.end_cell(), 0);
        return ();
    }
    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int price, int limit, int end) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int price, int limit, int end) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}

(int, int, int) get_price() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, int price, int limit, int end) = load_data();
    return (price, limit, end);
}
